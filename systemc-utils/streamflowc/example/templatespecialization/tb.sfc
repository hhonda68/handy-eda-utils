// -*- c++ -*-
#ifndef TB_H
#define TB_H

#include "common.h"

module Tb {
 input:
  u34_t sum;
 output:
  u31_t d0, d1, d2, d3, d4, d5, d6, d7;
};

#endif

////////////////////////////////////////////////////////////////

#include "tb.h"
#include <iostream>
#include <stdexcept>

namespace {

class Rng {
public:
  Rng(unsigned int seed = 0x12345678) : m_seed(seed) {}
  u16_t get16() {
    m_seed = m_seed * 1103515245u + 12345u;
    return (m_seed >> 15) & 0xffff;
  }
  u31_t get31() {
    u16_t lo = get16();
    u16_t hi = get16();
    return ((hi&0x7fff) << 16) | lo;
  }
private:
  unsigned int m_seed;
};

} // anonymous namespace

struct Tb {
  typedef unsigned int uint;
  typedef unsigned long long ullong;
  u34_t m_expect;
  bool  m_verified;
};

Tb() {
  Rng      rng;
  for (int i=0; i<10; ++i) {
    u31_t d0 = rng.get31();
    u31_t d1 = rng.get31();
    u31_t d2 = rng.get31();
    u31_t d3 = rng.get31();
    u31_t d4 = rng.get31();
    u31_t d5 = rng.get31();
    u31_t d6 = rng.get31();
    u31_t d7 = rng.get31();
    std::cout << "d0-d7 " << (uint)d0 << ' ' << (uint)d1 << ' ' << (uint)d2 << ' ' << (uint)d3
              << ' ' << (uint)d4 << ' ' << (uint)d5 << ' ' << (uint)d6 << ' ' << (uint)d7 << '\n';
    m_expect = (ullong)d0 + d1 + d2 + d3 + d4 + d5 + d6 + d7;
    m_verified = false;
    d0_out(d0);
    d1_out(d1);
    d2_out(d2);
    d3_out(d3);
    d4_out(d4);
    d5_out(d5);
    d6_out(d6);
    d7_out(d7);
    if (! m_verified)  throw std::runtime_error("no DUT output");
  }
}

Tb(sum) {
  std::cout << "sum " << (ullong)sum;
  if (sum != m_expect) {
    std::cout << " != " << (ullong)m_expect << '\n';
    throw std::runtime_error("curious DUT output");
  }
  std::cout << '\n';
  m_verified = true;
}
