// -*- c++ -*-
#ifndef AVGVAR_H
#define AVGVAR_H

#include "common.h"

module AvgVar {
 input:
  u8_t  idata;
 output:
  u24_t avg_var;	// {average(8bits),variance(16bits)}
};

#endif

////////////////////////////////////////////////////////////////

#include "avgvar.h"

namespace {

// data formats
//   S<m,n> : signed value with "m" integral bits (including sign bit) and "n" fractional bits
//   U<m,n> : unsigned value with "m" integral bits and "n" fractional bits

u11_t calc_average(const u8_t arr[8])	// arr: U<8,0>, ret: U<8,3>
{
  u11_t sum = 0;	// U<11,0>
  for (int i=0; i<8; ++i)  sum += arr[i];
  // reinterpret the sum in U<11,0> format as the average in U<8,3> format
  u11_t avg = sum;	// U<8,3>
  return avg;
}

u16_t calc_variance(const u8_t arr[8], u11_t avg)	// arr: U<8,0>, avg: U<8,3>, ret: U<16,0>
{
  // V(X) := E(squ(X-E(X)))
  //   Variance is the average of squared difference between input data and its average.
  u25_t sum = 0;	// U<19,6> as the sum of values
  for (int i=0; i<8; ++i) {
    s12_t diff = (arr[i]<<3) - avg;	// S<9,3> (-255.0 .. +255.0)
    u22_t squared_diff = diff * diff;	// U<16,6>
    sum += squared_diff;
  }
  // reinterpret the sum in U<19,6> format as the average in U<16,9> format
  u25_t var = sum;		// U<16,9>
  // truncate the fractional part
  u16_t ivar = var >> 9;	// U<16,0>
  return ivar;
}

} // anonymous namespace

struct AvgVar {
  u8_t m_buf[8];
  int  m_ix;
};

AvgVar() { m_ix = 0; }

AvgVar(idata)
{
  m_buf[m_ix++] = idata;
  if (m_ix == 8) {
    u11_t avg = calc_average(m_buf);
    u16_t var = calc_variance(m_buf, avg);
    u8_t  iavg = avg >> 3;
    u24_t ans = (iavg,var);
    avg_var_out(ans);	// one output for every 8 inputs
    m_ix = 0;
  }
}
