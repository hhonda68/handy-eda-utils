#
# EMIPS : Embedding MIPS Microprocessor
#
# Copyright (c) 2012 the handy-eda-utils developer(s).
# Distributed under the MIT License.
# (See accompanying file COPYING or copy at
#  http://www.opensource.org/licenses/mit-license.php.)

module emips
p     AW 10			# internal memory address width (byte address)
p     INITPFX "emips-mem"	# prefix of internal memory initialization data filename
i     clk rst
o     copwe	# COP0 write enable
o     copre     # COP0 read enable
o   5 copaddr	# COP0 address
o  32 copwdata	# COP0 write data
i  32 coprdata	# COP0 read data
i     copbusy	# COP0 busy

l     IAW AW-2	# instruction memory address width (word address)
l     DAW AW	# data memory addresss width (byte address)

w     mulbusy
w     cke = !(mulbusy || copbusy)

w IAW npc npc_nxt
w IAW imaddr = rst ? {IAW{1'b0}} : npc_nxt	# instruction memory read address
w  32 imdata					# instruction memory read data
m $dffe#(IAW) clk cke imaddr npc
w  32 insn_fetch insn_exec
a     insn_fetch = imdata
m $dffre#(32) clk rst cke insn_fetch insn_exec

w   5 rsnr_fetch rtnr_fetch
a     { rsnr_fetch rtnr_fetch } = insn_fetch[25:16]

w   5 wbknr
w  32 wbk
w     wbknr_nez = (wbknr != 5'd0)
w  32 rfrs rfrt rs rt
w     gpr_we = cke & wbknr_nez
`ifdef EMIPS_RTLSIM
m $ram#(5,32) clk gpr_we wbknr wbk cke rsnr_fetch rfrs
m $ram#(5,32) clk gpr_we wbknr wbk cke rtnr_fetch rfrt
`else
// Altera MLAB needs explicit bypass logic
w  32 rfrs_mlab rfrt_mlab wbk_new
m $altera_mlab#(5,32) clk gpr_we wbknr wbk cke rsnr_fetch rfrs_mlab
m $altera_mlab#(5,32) clk gpr_we wbknr wbk cke rtnr_fetch rfrt_mlab
w     rs_new_nxt = wbknr_nez & (wbknr == rsnr_fetch)
w     rt_new_nxt = wbknr_nez & (wbknr == rtnr_fetch)
w     rs_new rt_new
m $dffre      clk rst cke     rs_new_nxt rs_new
m $dffre      clk rst cke     rt_new_nxt rt_new
m $dffe#(32)  clk     gpr_we  wbk        wbk_new
a     rfrs = rs_new ? wbk_new : rfrs_mlab
a     rfrt = rt_new ? wbk_new : rfrt_mlab
`endif

w   6 opcode funct
w   5 rsnr rtnr rdnr sa
w  16 imm
a     { opcode rsnr rtnr imm } = insn_exec
a     { rdnr sa funct } = imm

w   2 npcsel
w  32 aluans sftans mulans
w IAW npcinc   = npc + 1'b1
w  32 npcinc32 = { {(30-IAW){1'b0}} npcinc 2'b00 }

w DAW dmaddr
w   5 wbknr_nxt
w   3 wbksel	# 0/1/2/3/4 = alu/sft/mul/npcinc/cop0
w  32 dmdata

m $fwd                            rsnr rtnr wbknr rfrs rfrt wbk rs rt
m $branch                         opcode rtnr funct rs rt npcsel
m $npccalc#(IAW)                  npc npcinc imm[IAW-1:0] rs[IAW+2-1:2] npcsel npc_nxt
m $alu#(DAW)                      opcode rs rt imm aluans dmaddr
m $sft                            funct[2:0] rt rs[4:0] sa sftans
m $mul                clk rst     opcode funct rs rt mulans mulbusy
m $wbksel                         opcode rsnr rtnr rdnr funct rs[31] wbknr_nxt wbksel
m $mem#(AW,INITPFX)   clk     cke imaddr imdata opcode dmaddr rt dmdata

w 128 wbkval_nxt_cand = { aluans sftans mulans npcinc32 }
w  32 wbkval_nxt0 = $sel#(2,32) ( ~wbksel[1:0] wbkval_nxt_cand )
w  32 wbkval_nxt = wbksel[2] ? coprdata : wbkval_nxt0

w  32 wbkval
w     wbkload
m $dffre#(5)  clk rst cke wbknr_nxt  wbknr
m $dffre#(32) clk rst cke wbkval_nxt wbkval
m $dffre#(1)  clk rst cke opcode[5]  wbkload
a     wbk = wbkload ? dmdata : wbkval

a     copre = opcode[4] && (~rsnr[2])
a     copwe = opcode[4] &&   rsnr[2]
a     copaddr = rdnr
a     copwdata = rt
endmodule

module $alu
p     DAW 16
i   6 opcode
i  32 rs rt
i  16 imm
o  32 ans
o DAW dmaddr

# ADDU  rd,rs,rt        rd=rs+rt                    000000  rs      rt      rd      00000   100001
# SUBU  rd,rs,rt        rd=rs-rt                    000000  rs      rt      rd      00000   100011
# AND   rd,rs,rt        rd=rs&rt                    000000  rs      rt      rd      00000   100100
# OR    rd,rs,rt        rd=rs|rt                    000000  rs      rt      rd      00000   100101
# XOR   rd,rs,rt        rd=rs^rt                    000000  rs      rt      rd      00000   100110
# NOR   rd,rs,rt        rd=~(rs|rt)                 000000  rs      rt      rd      00000   100111
# SLT   rd,rs,rt        rd=rs<rt                    000000  rs      rt      rd      00000   101010
# SLTU  rd,rs,rt        rd=rs<rt                    000000  rs      rt      rd      00000   101011
# 
# ADDIU rt,rs,imm       rt=rs+simm                  001001  rs      rt      imm
# SLTI  rt,rs,imm       rt=rs<simm                  001010  rs      rt      imm
# SLTIU rt,rs,imm       rt=rs<uimm                  001011  rs      rt      imm
# ANDI  rt,rs,imm       rt=rs&uimm                  001100  rs      rt      imm
# ORI   rt,rs,imm       rt=rs|uimm                  001101  rs      rt      imm
# XORI  rt,rs,imm       rt=rs^uimm                  001110  rs      rt      imm
# LUI   rt,imm          rt=imm<<16                  001111  00000   rt      imm
# 
# LB    rt,offset(rs)   rt=*(char*)(offset+rs)      100000  rs      rt      offset
# LBU   rt,offset(rs)   rt=*(Uchar*)(offset+rs)     100100  rs      rt      offset
# LH    rt,offset(rs)   rt=*(short*)(offset+rs)     100001  rs      rt      offset
# LHU   rt,offset(rs)   rt=*(Ushort*)(offset+rs)    100101  rs      rt      offset
# LW    rt,offset(rs)   rt=*(int*)(offset+rs)       100011  rs      rt      offset
# SB    rt,offset(rs)   *(char*)(offset+rs)=rt      101000  rs      rt      offset
# SH    rt,offset(rs)   *(short*)(offset+rs)=rt     101001  rs      rt      offset
# SW    rt,offset(rs)   *(int*)(offset+rs)=rt       101011  rs      rt      offset

################################################################

# Selecting "IMM" operand
#
# opcode  insn  type
# ------------------
# 001001  ADDIU  S
# 001010  SLTI   S
# 001011  SLTIU  U
# 001100  ANDI   U
# 001101  ORI    U
# 001110  XORI   U
# 001111  LUI    H
#
# 100000  LB     S
# 100100  LBU    S
# 100001  LH     S
# 100101  LHU    S
# 100011  LW     S
# 101000  SB     S
# 101001  SH     S
# 101011  SW     S

w    use_imm = opcode[5] || opcode[3]
w    imm_lui = (opcode[2:0] == 3'b111)
w    imm_unsigned = (~opcode[5]) && (opcode[2] || opcode[1:0]==2'b11)
w 16 imm_hi = imm_lui ? ~imm   : {16{(~imm_unsigned)&imm[15]}}
w 16 imm_lo = imm_lui ? ~16'h0 : imm
w 32 imm32 = { imm_hi imm_lo }

w 32 lhs = rs
w 32 rhs = use_imm ? imm32 : rt

################################################################

# Selecting ADD/SUB
#
# opcode  funct    insn    type
# ------------------------------
# 000000  100001   ADDU     ADD
# 000000  100011   SUBU     SUB
# 000000  101010   SLT      SUB
# 000000  101011   SLTU     SUB
# 		   	   
# 001001           ADDIU    ADD
# 001010           SLTI     SUB
# 001011           SLTIU    SUB
# 		   	   
# 100000           LB       ADD
# 100100           LBU      ADD
# 100001           LH       ADD
# 100101           LHU      ADD
# 100011           LW       ADD
# 101000           SB       ADD
# 101001           SH       ADD
# 101011           SW       ADD

w  6 funct = imm[5:0]
w    do_subtract = (~opcode[5]) && (opcode[3] ? opcode[1] : funct[1])
w 33 lhs33 = { 1'b0 lhs }
w 33 rhs33 = { 1'b0 (rhs^{32{do_subtract}}) }
w    ci    = do_subtract
w    adder_co
w 32 adder_ans
a    { adder_co adder_ans } = lhs33 + rhs33 + ci
a    dmaddr = adder_ans[DAW-1:0]

################################################################

# Selecting Logical Operation
#
#  opcode  funct    insn   operation
# -----------------------------------
#  000000  100100   AND     AND
#  000000  100101   OR      OR
#  000000  100110   XOR     XOR
#  000000  100111   NOR     NOR
#  001100           ANDI    AND
#  001101           ORI     OR
#  001110           XORI    XOR
#  001111           LUI     NOR

w  2 logicop_sel = opcode[3] ? opcode[1:0] : funct[1:0]
w 32 logicop_ans = logicop_sel[1] ? (logicop_sel[0] ? ~(lhs|rhs) : (lhs^rhs)) : (logicop_sel[0] ? (lhs|rhs) : (lhs&rhs))

################################################################

# Calculating SLTxx answer
#
# opcode   funct   insn   type
# -------------------------------------------
# 000000   101010  SLT    signed less-than
# 000000   101011  SLTU   unsigned less-than
# 001010           SLTI   signed less-than
# 001011           SLTIU  unsigned less-than
#

w    slt_flg_unsigned = ~adder_co
w    slt_flg_signed   = (lhs[31]==rhs[31]) ? adder_ans[31] : lhs[31]
w    slt_flg          = (opcode[3]?opcode[0]:funct[0]) ? slt_flg_unsigned : slt_flg_signed
w 32 slt_ans = { 31'h0 slt_flg }

################################################################

# Selecting "ans" output
#
# opcode  funct   insn   ans
# -----------------------------------
# 000000  100001  ADDU   adder_ans
# 000000  100011  SUBU   adder_ans
# 000000  100100  AND    logicop_ans
# 000000  100101  OR     logicop_ans
# 000000  100110  XOR    logicop_ans
# 000000  100111  NOR    logicop_ans
# 000000  101010  SLT    slt_ans
# 000000  101011  SLTU   slt_ans
# 001001          ADDIU  adder_ans
# 001010          SLTI   slt_ans
# 001011          SLTIU  slt_ans
# 001100          ANDI   logicop_ans
# 001101          ORI    logicop_ans
# 001110          XORI   logicop_ans
# 001111          LUI    logicop_ans

w    use_logicop = opcode[3] ? opcode[2] : funct[2]
w    use_slt     = opcode[3] ? opcode[1] : funct[3]
a    ans = use_logicop ? logicop_ans : (use_slt ? slt_ans : adder_ans)

endmodule

module $sft
i  3 funct	# "funct" field
i 32 rt
i  5 rs
i  5 sa		# "sa" field
o 32 ans
#
# funct   operation    opcode
# ---------------------------
#  000    rt << sa     SLL
#  010    rt >> sa     SRL
#  011    rt >> sa     SRA
#  100    rt << rs     SLLV
#  110    rt >> rs     SRLV
#  111    rt >> rs     SRAV
#
w    vari rgt arith
a    { vari rgt arith } = funct
w  5 sh = vari ? rs : sa
w  5 sft_rhs = ({5{~rgt}} ^ sh) + {4'b0000,~rgt}	# rgt ? sh : -sh
w 32 sft_lhs_hi = rgt ? {32{arith&rt[31]}} : rt
w 32 sft_lhs_lo = (rgt || (sh==5'h0)) ? rt : 32'h0
w 64 sft_lhs = { sft_lhs_hi sft_lhs_lo }
w 64 sft_ans = sft_lhs >> sft_rhs
a    ans = sft_ans[31:0]
endmodule

module $mul
i    clk rst
i  6 opcode
i  6 funct
i 32 rs rt
o 32 ans
o    ans_busy

#`define EMIPS_MUL_BEHAVIOR
`ifdef EMIPS_MUL_BEHAVIOR

# opcode  funct   insn
# -----------------------
# 000000  x10x00  MFHI  
# 000000  x10x10  MFLO  
# 000000  x11x00  MULT  
# 000000  x11x01  MULTU 
# 000000  x11x10  DIV   
# 000000  x11x11  DIVU  

w    rs_negative = (~funct[0]) && rs[31]
w    rt_negative = (~funct[0]) && rt[31]
w 64 rs64 = { {32{rs_negative}} rs }
w 64 rt64 = { {32{rt_negative}} rt }
w 64 mul64 = rs64 * rt64

#  rs   rt   quo  rem
# --------------------
# +22 = +7 * +3 +  +1
# -22 = +7 * -3 +  -1
# +22 = -7 * -3 +  +1
# -22 = -7 * +3 +  -1
w 32 rs_mag = rs_negative ? -rs : rs
w 32 rt_mag = rt_negative ? -rt : rt
w 32 rt_mag_adj = rt_mag | {31'h0,(rt==32'h0)}   # avoid div-by-zero error
w 32 unsigned_quo = rs_mag / rt_mag_adj
w 32 unsigned_rem = rs_mag % rt_mag_adj
w    quo_negative = (~funct[0]) && (rs[31] ^ rt[31])
w    rem_negative = rs_negative
w 32 quo = quo_negative ? -unsigned_quo : unsigned_quo
w 32 rem = rem_negative ? -unsigned_rem : unsigned_rem

w 32 hi lo
w 32 hi_nxt = funct[1] ? rem : mul64[63:32]
w 32 lo_nxt = funct[1] ? quo : mul64[31:0]
w    hilo_cke = (opcode == 6'h0) && (funct[4:3] == 2'b11)
m $dffe#(32) clk hilo_cke hi_nxt hi
m $dffe#(32) clk hilo_cke lo_nxt lo
a    ans = funct[1] ? lo : hi
a    ans_busy = 1'b0

`else

w    mulop_req = (opcode == 6'd0) && funct[4]

w  2 state   # 0/1/2/3 = idle/mul_loop/div_setup/div_loop
a    ans_busy = (state != 2'd0) && mulop_req

w  5 loopcount
w  5 loopcount_inc
w    loopcount_co
a    { loopcount_co loopcount_inc } = {1'b0,loopcount} + 1'b1
w    loopcount_cke = state[0]
m $dffre#(5) clk rst loopcount_cke loopcount_inc loopcount

w  2 st0_state_nxt  = (mulop_req && funct[3]) ? (funct[1] ? (((~funct[0])&&rs[31]) ? 2'd2 : 2'd3) : 2'd1) : 2'd0
w  2 st13_state_nxt = loopcount_co ? 2'd0 : state
w  2 st2_state_nxt  = 2'd3
w  2 state_nxt = state[0] ? st13_state_nxt : (state[1] ? st2_state_nxt : st0_state_nxt)
m $dffr#(2) clk rst state_nxt state

w 32 hi lo rhs
w    muldiv_signed lhs_msb
w    rhs_cke = (state == 2'd0) && (st0_state_nxt != 2'd0)
w    muldiv_signed_cke = rhs_cke || ((state==2'd1) && loopcount_co)
w    muldiv_signed_nxt = (~state[0]) ? (~funct[0]) : 1'b0
m $dffe#(32) clk rhs_cke           rt                rhs
m $dffe#(1)  clk rhs_cke           rs[31]            lhs_msb
m $dffe#(1)  clk muldiv_signed_cke muldiv_signed_nxt muldiv_signed
w    hi_cke = state[0] || ((~state[1]) && (st0_state_nxt != 2'd0))
w    lo_cke = (state != 2'd0) || (st0_state_nxt != 2'd0)
w 33 adder_lhs = (state == 2'd3) \
                  ? {hi,lo[31]} \
                  : ((state[0]||((~state[1])&&(~funct[1]))) ? {muldiv_signed&&hi[31],hi} : {1'b0,lo})
w    adder_lhs_negate = (~state[0]) && (state[1] || (muldiv_signed && (lhs_msb ^ (funct[1]&rhs[31]))))
w 33 adder_rhs = { muldiv_signed&&rhs[31] rhs }
w    adder_rhs_enable = state[0] && (state[1] || lo[0])
w    adder_rhs_negate = state[1] ? ((~muldiv_signed) || (~rhs[31])) : (muldiv_signed && loopcount_co)
w 33 adder_lhs_final = adder_lhs ^ {33{adder_lhs_negate}}
w 33 adder_rhs_final = ((adder_rhs ^ {33{adder_rhs_negate}}) & {33{adder_rhs_enable}})
w    adder_ci_final  = adder_lhs_negate | (adder_rhs_enable & adder_rhs_negate)
w 33 adder_ans = adder_lhs_final + adder_rhs_final + adder_ci_final

w 32 st0_lo_nxt = rs
w 32 st1_lo_nxt = { adder_ans[0] lo[31:1] }
w 32 st2_lo_nxt = adder_ans[31:0]
w 32 st3_lo_nxt = { lo[30:0] (~adder_ans[32]) }
w 128 lo_nxt_cand = { st[0-3]_lo_nxt }
w 32 lo_nxt = $sel#(2,32) ( ~state lo_nxt_cand )
w 32 st0_hi_nxt = 32'h0
w 32 st1_hi_nxt = adder_ans[32:1]
w 32 st3_hi_nxt = adder_ans[32] ? {hi[30:0],lo[31]} : adder_ans[31:0]
w 32 hi_nxt = state[0] ? (state[1] ? st3_hi_nxt : st1_hi_nxt) : st0_hi_nxt
m $dffe#(32) clk lo_cke lo_nxt lo
m $dffe#(32) clk hi_cke hi_nxt hi

a    ans = adder_ans[31:0]

`endif

endmodule

module $branch
i  6 opcode
i  5 rtnr
i  6 funct
i 32 rs rt
o  2 npc_sel		# 0/1/2/3 = nPC+4 / nPC+offset*4 / rs / jmptgt*4

# opcode  rtnr    funct   insn    cond     nPC  link
# ------------------------------------------------------------------------------------------
# 000000          000000  SLL     
# 000000          000010  SRL     
# 000000          000011  SRA     
# 000000          000100  SLLV    
# 000000          000110  SRLV    
# 000000          000111  SRAV    
# 000000          001000  JR      true     rs
# 000000          001001  JALR    true     rs    rd
# 000000          010000  MFHI    
# 000000          010010  MFLO    
# 000000          011000  MULT    
# 000000          011001  MULTU   
# 000000          011010  DIV     
# 000000          011011  DIVU    
# 000000          100001  ADDU    
# 000000          100011  SUBU    
# 000000          100100  AND     
# 000000          100101  OR      
# 000000          100110  XOR     
# 000000          100111  NOR     
# 000000          101010  SLT     
# 000000          101011  SLTU    
# 000001  00000           BLTZ    rs<0     +ofs                rs[31]
# 000001  00001           BGEZ    rs>=0    +ofs                ~rs[31]
# 000001  10000           BLTZAL  rs<0     +ofs  r31           rs[31]
# 000001  10001           BGEZAL  rs>=0    +ofs  r31           ~rs[31]
# 000010                  J       true     tgt
# 000011                  JAL     true     tgt   r31
# 000100                  BEQ     rs==rt   +ofs                rs_eq_rt
# 000101                  BNE     rs!=rt   +ofs                ~rs_eq_rt
# 000110                  BLEZ    rs<=0    +ofs                rs[31]|rs_eq_rt
# 000111                  BGTZ    rs>0     +ofs                (~rs[31])&(~rs_eq_rt)
# 001001                  ADDIU   
# 001010                  SLTI    
# 001011                  SLTIU   
# 001100                  ANDI    
# 001101                  ORI     
# 001110                  XORI    
# 001111                  LUI     
# 010000          000000  MFC0/MTC0
# 100000                  LB      
# 100001                  LH      
# 100011                  LW      
# 100100                  LBU     
# 100101                  LHU     
# 101000                  SB      
# 101001                  SH      
# 101011                  SW      

w    rs_neg        = rs[31]
w    rs_eq_rt      = (rs == rt)
w    judge         = ((opcode[2]&&rs_eq_rt) || (((~opcode[2])||opcode[1])&&rs_neg)) ^ (opcode[2]?opcode[0]:rtnr[0])
w    opcode_lt8    = (opcode[5:3] == 3'b000)
w    funct_jr      = (funct[5:3] == 3'b001)
w    taken         = opcode_lt8 && ((opcode[2:0]==3'b000) ? funct_jr : ((opcode[2:1]==2'b01) || judge))
a    npc_sel       = taken ? ((opcode[2:0]==3'b000) ? 2'd2 : ((opcode[2:1]==2'b01) ? 2'd3 : 2'd1)) : 2'd0
endmodule

module $npccalc
p     IAW 10
i IAW npc npcinc ofstgt rs	# rs[IAW+2-1:2]
i   2 sel			# 0/1/2/3 = nPC+4 / nPC+offset*4 / rs / jmptgt*4
o IAW ans
w IAW npcofs = npc + ofstgt
w IAW*4 cand = { npcinc npcofs rs ofstgt }
a     ans = $sel#(2,IAW) ( ~sel cand )
endmodule

module $wbksel
i  6 opcode
i  5 rsnr
i  5 rtnr
i  5 rdnr
i  6 funct
i    rs_sign
o  5 wbknr
o  3 wbksel	# 0/1/2/3/4 = alu/sft/mul/npcinc/cop0

# opcode  rsnr    rtnr    funct    insn   wbkval  wbknr
# -------------------------------------------------------
# 000000                  000000   SLL     sft     rd
# 000000                  000010   SRL     sft     rd
# 000000                  000011   SRA     sft     rd
# 000000                  000100   SLLV    sft     rd
# 000000                  000110   SRLV    sft     rd
# 000000                  000111   SRAV    sft     rd
# 000000                  001000   JR              rd=0
# 000000                  001001   JALR    npcinc  rd
# 000000                  010000   MFHI    mul     rd
# 000000                  010010   MFLO    mul     rd
# 000000                  011000   MULT            rd=0
# 000000                  011001   MULTU           rd=0
# 000000                  011010   DIV             rd=0
# 000000                  011011   DIVU            rd=0
# 000000                  100001   ADDU    alu     rd
# 000000                  100011   SUBU    alu     rd
# 000000                  100100   AND     alu     rd
# 000000                  100101   OR      alu     rd
# 000000                  100110   XOR     alu     rd
# 000000                  100111   NOR     alu     rd
# 000000                  101010   SLT     alu     rd
# 000000                  101011   SLTU    alu     rd
# 000001          00000            BLTZ    
# 000001          00001            BGEZ    
# 000001          10000            BLTZAL  npcinc  r31 [if rs_sign]
# 000001          10001            BGEZAL  npcinc  r31 [if !rs_sign]
# 000010                           J       
# 000011                           JAL     npcinc  r31
# 000100                           BEQ     
# 000101                           BNE     
# 000110                           BLEZ    
# 000111                           BGTZ    
# 001001                           ADDIU   alu     rt
# 001010                           SLTI    alu     rt
# 001011                           SLTIU   alu     rt
# 001100                           ANDI    alu     rt
# 001101                           ORI     alu     rt
# 001110                           XORI    alu     rt
# 001111                           LUI     alu     rt
# 010000  00000                    MFC0    cop0    rt
# 010000  00100                    MTC0    
# 100000                           LB      (mem)   rt
# 100001                           LH      (mem)   rt
# 100011                           LW      (mem)   rt
# 100100                           LBU     (mem)   rt
# 100101                           LHU     (mem)   rt
# 101000                           SB      
# 101001                           SH      
# 101011                           SW      
w    wbk_we = opcode[5] \
              ? (~opcode[3]) \
              : (opcode[4] \
                 ? (~rsnr[2]) \
                 : (opcode[3] || ((~opcode[2]) && (opcode[0] ? (opcode[1]||(rtnr[4]&&(rs_sign^rtnr[0]))) : (~opcode[1])))))
a    wbknr = wbk_we ? ((opcode[5:3]!=3'b000) ? rtnr : (opcode[0] ? 5'd31 : rdnr)) : 5'd0
a    wbksel = opcode[4] \
              ? 3'd4 \
              : (opcode[3] \
                 ? 3'd0 \
                 : ((opcode[1:0]!=2'b00) ? 3'd3 : (funct[5] ? 3'd0 : (funct[4] ? 3'd2 : funct[3] ? 3'd3 : 3'd1))))
endmodule

module $mem
p     AW       16
p     INITPFX  "emips-mem"
l     IAW      AW-2
l     DAW      AW
i     clk cke
i IAW imaddr
o  32 imdata
i   6 dmopcode
i DAW dmaddr
i  32 dmwdata
o  32 dmrdata

# dmopcode  insn
# -------------
# 100000     LB 
# 100001     LH 
# 100011     LW 
# 100100     LBU
# 100101     LHU
# 101000     SB 
# 101001     SH 
# 101011     SW 

w  8 dmwdata[0-3]			# wdata0=MSB, wdata3=LSB
a    { dmwdata[0-3] } = dmwdata
w  8 memwdata3 = dmwdata3
w  8 memwdata2 = (dmopcode[1:0]!=2'b00) ? dmwdata2 : dmwdata3
w  8 memwdata1 = dmopcode[1] ? dmwdata1 : dmwdata3
w  8 memwdata0 = dmopcode[1] ? dmwdata0 : (dmopcode[0] ? dmwdata2 : dmwdata3)
w    store_insn = cke && dmopcode[5] && dmopcode[3]
w    dmwe0 = store_insn && (dmopcode[1] || ((~dmaddr[1]) && (dmopcode[0] || (~dmaddr[0]))))
w    dmwe1 = store_insn && (dmopcode[1] || ((~dmaddr[1]) && (dmopcode[0] ||   dmaddr[0] )))
w    dmwe2 = store_insn && (dmopcode[1] || (  dmaddr[1]  && (dmopcode[0] || (~dmaddr[0]))))
w    dmwe3 = store_insn && (dmopcode[1] || (  dmaddr[1]  && (dmopcode[0] ||   dmaddr[0] )))
w    dmre = cke && dmopcode[5] && (~dmopcode[3])
w  8 imdata[0-3] memrdata[0-3]
w  2 dmraddrlo
w  3 dmrtype
l    MEM0 {INITPFX,"0.hex"}	# byte address 4n+0 : most significant byte in 32bit word
l    MEM1 {INITPFX,"1.hex"}
l    MEM2 {INITPFX,"2.hex"}
l    MEM3 {INITPFX,"3.hex"}	# byte address 4n+3 : least significant byte in 32bit word
m $dpram#(AW-2,8,MEM0) clk imaddr 1'b0 8'd0 cke imdata0 dmaddr[DAW-1:2] dmwe0 memwdata0 dmre memrdata0
m $dpram#(AW-2,8,MEM1) clk imaddr 1'b0 8'd0 cke imdata1 dmaddr[DAW-1:2] dmwe1 memwdata1 dmre memrdata1
m $dpram#(AW-2,8,MEM2) clk imaddr 1'b0 8'd0 cke imdata2 dmaddr[DAW-1:2] dmwe2 memwdata2 dmre memrdata2
m $dpram#(AW-2,8,MEM3) clk imaddr 1'b0 8'd0 cke imdata3 dmaddr[DAW-1:2] dmwe3 memwdata3 dmre memrdata3
a    imdata = { imdata[0-3] }
m $dffe#(5)            clk dmre {dmaddr[1:0],dmopcode[2:0]} {dmraddrlo,dmrtype}
#   dmrtype  dmraddrlo   dmrdata
#  ------------------------------------
#     000        00      {s0,s0,s0,d0}
#     000        01      {s1,s1,s1,d1}
#     000        10      {s2,s2,s2,d2}
#     000        11      {s3,s3,s3,d3}
#     001        0x      {s0,s0,d0,d1}
#     001        1x      {s2,s2,d2,d3}
#     011        xx      {d0,d1,d2,d3}
#     100        00      {00,00,00,d0}
#     100        01      {00,00,00,d1}
#     100        10      {00,00,00,d2}
#     100        11      {00,00,00,d3}
#     101        0x      {00,00,d0,d1}
#     101        1x      {00,00,d2,d3}
w  8 ext0 = {8{(~dmrtype[2])&&memrdata0[7]}}
w  8 ext1 = {8{(~dmrtype[2])&&memrdata1[7]}}
w  8 ext2 = {8{(~dmrtype[2])&&memrdata2[7]}}
w  8 ext3 = {8{(~dmrtype[2])&&memrdata3[7]}}
w 32 extw = { ext[0-3] }
w  8 extb = $sel#(2,8) ( ~dmraddrlo extw )
w 32 memrdata = { memrdata[0-3] }
w  2 dmrdata3_sel = dmraddrlo | dmrtype[1:0]
w  8 dmrdata3 = $sel#(2,8) ( ~dmrdata3_sel memrdata )
w  8 dmrdata2 = dmrtype[0] ? ((dmrtype[1]|dmraddrlo[1]) ? memrdata2 : memrdata0) : extb
w  8 dmrdata1 = dmrtype[1] ? memrdata1 : extb
w  8 dmrdata0 = dmrtype[1] ? memrdata0 : extb
a    dmrdata = { dmrdata[0-3] }
endmodule

module $fwd
i  5 rsnr rtnr wbknr
i 32 rfrs rfrt wbk
o 32 rs rt
w    rsfwd = (rsnr == wbknr)
w    rtfwd = (rtnr == wbknr)
w    rszero = (rsnr == 5'd0)
w    rtzero = (rtnr == 5'd0)
a    rs = rszero ? 32'd0 : (rsfwd ? wbk : rfrs)
a    rt = rtzero ? 32'd0 : (rtfwd ? wbk : rfrt)
endmodule

`ifdef EMIPS_RTLSIM
module $ram
p     AW 8
p     DW 8
i     CLK
i     WE
i  AW WA
i  DW WD
i     RE
i  AW RA
o  DW RD
l     DEPTH (1<<AW)
reg [DW-1:0] mem[0:DEPTH-1];
reg [DW-1:0] RD;
always @(posedge CLK) begin
  if (WE)  mem[WA] = WD;
  if (RE)  RD <= mem[RA];
end
endmodule
`else
module $altera_mlab
p     AW 8
p     DW 8
i     CLK
i     WE
i  AW WA
i  DW WD
i     RE
i  AW RA
o  DW RD
l     DEPTH (1<<AW)
(* ramstyle = "MLAB,no_rw_check" *)
reg [DW-1:0] mem[0:DEPTH-1];
reg [AW-1:0] RA_reg;
always @(posedge CLK) begin
  if (WE)  mem[WA] <= WD;
  if (RE)  RA_reg <= RA;
end
a RD = mem[RA_reg]
endmodule
`endif

module $dpram
p     AW 16
p     DW 8
p     INITFILE "initfile.hex"
i     CLK
i  AW A0
i     WE0
i  DW WD0
i     RE0
o  DW RD0
i  AW A1
i     WE1
i  DW WD1
i     RE1
o  DW RD1
`ifdef EMIPS_RTLSIM
l     DEPTH (1<<AW)
reg [DW-1:0] mem[0:DEPTH-1];
reg [DW-1:0] RD0, RD1;
initial $readmemh(INITFILE, mem);
always @(posedge CLK) begin
  if (WE0)  mem[A0] <= WD0;
  if (RE0)  RD0 <= mem[A0];
  /*synthesis translate_off*/
  if (RE0 & WE0)  RD0 <= {DW{1'bx}};
  /*synthesis translate_on*/
end
always @(posedge CLK) begin
  if (WE1)  mem[A1] <= WD1;
  if (RE1)  RD1 <= mem[A1];
  /*synthesis translate_off*/
  if (RE1 & WE1)  RD1 <= {DW{1'bx}};
  /*synthesis translate_on*/
end
`else
w  AW ABAK[0-1] AADJ[0-1]
w     CS0 = RE0 | WE0
w     CS1 = RE1 | WE1
m $dffe#(AW) CLK CS0 A0 ABAK0
m $dffe#(AW) CLK CS1 A1 ABAK1
a     AADJ0 = CS0 ? A0 : ABAK0
a     AADJ1 = CS1 ? A1 : ABAK1
m $inferrable_dpram#(AW,DW,INITFILE) CLK AADJ0 WE0 WD0 RD0 AADJ1 WE1 WD1 RD1
`endif
endmodule

`ifndef EMIPS_RTLSIM
module $inferrable_dpram
p     AW 16
p     DW 8
p     INITFILE "initfile.hex"
i     CLK
i  AW A0
i     WE0
i  DW WD0
o  DW RD0
i  AW A1
i     WE1
i  DW WD1
o  DW RD1
l     DEPTH (1<<AW)
(* ramstyle = "no_rw_check" *)
reg [DW-1:0] mem[0:DEPTH-1];
reg [DW-1:0] RD0, RD1;
initial $readmemh(INITFILE, mem);
always @(posedge CLK) begin
  RD0 <= mem[A0];
  if (WE0) begin
    RD0 <= WD0;
    mem[A0] <= WD0;
  end
end
always @(posedge CLK) begin
  RD1 <= mem[A1];
  if (WE1) begin
    RD1 <= WD1;
    mem[A1] <= WD1;
  end
end
endmodule
`endif

module $sel
p    SW 1 OW 1
l N  1<<SW
l IW N*OW
i SW sel
i IW idata
o OW odata
`ifdef EMIPS_RTLSIM
a    odata = idata[OW*sel +: OW]
`else
wire [OW-1:0] cand[0:N-1];
genvar i;
generate
for (i=0; i<N; i=i+1) begin :reassign
  assign cand[i] = idata[OW*i +: OW];
end
endgenerate
a    odata = cand[sel]
`endif
endmodule

module $dffre
p   W 1
p W INIT {W{1'b0}}
i   clk rst cke
i W d
o W q
reg [W-1:0] q;
always @(posedge clk) begin
  if (rst)  q <= INIT;
  else      q <= cke ? d : q;
end
endmodule

module $dffe
p   W 1
i   clk cke
i W d
o W q = $dffre#(W) ( clk 1'b0 cke d )
endmodule

module $dffr
p   W 1
i   clk rst
i W d
o W q = $dffre#(W) ( clk rst 1'b1 d )
endmodule
