#
# Lightweight functional digital logic simulator library.
#

# Copyright (c) 2008 the handy-eda-utils develeper(s).
# Distributed under the MIT License.
# (See accompanying file COPYING or copy at
#  http://www.opensource.org/licenses/mit-license.php.)

# Last modified on October 2004.

サイクルベース回路シミュレーションライブラリ CycleC (2004/10/18)

[A] 概要
[B] 基本的使用例
  [B.1] NAND ゲートのシミュレーション
    [B.1.1] テスト対象回路クラスを作る
    [B.1.2] テストジグクラスを作る
    [B.1.3] テストベンチクラスを作る
    [B.1.4] シミュレーションメインルーチンを書く
    [B.1.5] 信号を覗き見する
  [B.2] カウンターのシミュレーション
    [B.2.1] テスト対象回路クラスを作る
    [B.2.2] テストジグクラスを作る
    [B.2.3] テストベンチクラスを作る
    [B.2.4] シミュレーションメインルーチンを書く
    [B.2.5] 信号を覗き見する
[C] 回路利用者向けリファレンス
  [C.1] CycleC::Circuit
    [C.1.1] InRange in(int ix, int n=1), OutRange out(int ox, int n=1)
    [C.1.2] uint outvalue(int ox, int n=1) const
    [C.1.3] uint invalue(int ix, int n=1) const
    [C.1.4] void tick()
    [C.1.5] void confirm_connection_sanity()
    [C.1.6] void reset()
    [C.1.7] void evaluate(), void update()
    [C.1.8] std::string name() const
    [C.1.9] コピーコンストラクタ、代入演算子
  [C.2] CycleC::CompoundCircuit
  [C.3] CycleC::connection_error, CycleC::infinite_recursion_error
[D] 回路実装者向けリファレンス
  [D.1] CycleC::Circuit
    [D.1.1] Circuit(int nr_input, int nr_output)
    [D.1.2] ~Circuit()
    [D.1.3] uint calc_outvalue(int ox) const
    [D.1.4] void evaluate(), void update()
    [D.1.5] void reset()
    [D.1.6] std::string myname() const
  [D.2] CycleC::CompoundCircuit
    [D.2.1] CompoundCircuit(int nr_input, int nr_output)
    [D.2.2] ~CompoundCircuit()
    [D.2.3] ストリーム風 << 演算子
    [D.2.4] InRange in(int ix, int n=1), OutRange out(int ox, int n=1)
[E] 発展技：多相クロック対応
  [E.1] 2 相クロック
  [E.2] 多相クロック

========
[A] 概要
========

CycleC は、ゼロ遅延サイクルベースで単相クロック 2 値論理回路シミュレー
ションを行うための C++ クラスライブラリです。SystemC と比べ、機能を絞
りこんでいる分だけ高速です。AXION-FPGA 実験試作 (100万ゲート相当) を 
CycleC と SystemC の両方でシミュレーションしてみると、CycleC のほうが 
10 倍高速でした。

ファイル構成：
    cyclec.h    ヘッダファイル (namespace CycleC)
    cyclec.cc   ライブラリ本体

CycleC 利用者は、2 つのクラスをベースに、自分の回路を継承記述します。
    CycleC::Circuit            回路
    CycleC::CompoundCircuit    階層化された複合回路

                        +-----------------+
                        | CycleC::Circuit |
                        +-----------------+
                                 |
        +-------------------+----+-----------------+
        |                   |                      |
+----------------+  +----------------+ +-------------------------+
| ユーザー回路Ａ |  | ユーザー回路Ｂ | | CycleC::CompoundCircuit |
+----------------+  +----------------+ +-------------------------+
                                                   |
                                        +----------+---------+
                                        |                    |
                                +----------------+  +----------------+
                                | ユーザー回路Ｃ |  | ユーザー回路Ｄ |
                                +----------------+  +----------------+

Circuit は、組み合わせ論理回路や順序論理回路を C++ で書くためのスケル
トンです。Circuit を継承して、入力信号から出力信号を計算する式を 
Circuit API 規定どおりに C++ で記述すれば、具体的なユーザー回路クラス
ができます。あとは、ユーザー回路クラスのインスタンスを生成して Circuit
API 規定どおりに接続すれば、サイクルベースシミュレーションを行えます。

しかし、Circuit だけではいわゆる「階層無しフラット設計」しかできません。
階層設計するには CompoundCircuit を使います。

CompoundCircuit は、サブ回路を内蔵して相互接続した「複合回路」を書くた
めのスケルトンです。CompoundCircuit を継承して、サブ回路インスタンスを
メンバ変数として持ち、CompoundCircuit API 規定通りに登録・接続すれば、
具体的なユーザー複合回路クラスができます。

CompoundCircuit 自体が Circuit を継承しているので、具体的なユーザー複
合回路クラスも全て Circuit として扱うことができます。つまり、インスタ
ンスを生成して Circuit API 規定どおりに接続してシミュレーションを行う
こともできるし、さらに大きな複合回路クラスに含ませて多層の階層設計をす
ることもできます。

回路の利用者は、その回路が階層無しフラット回路か複合回路かを気にしない
でしょうから、全ての回路を Circuit として扱うでしょう。一方、回路の実
装者は、階層無しフラット回路として作るか複合回路として作るかによって、
Circuit と CompoundCircuit を使い分けるでしょう。

# カウンター回路クラスを作る場合、next_cnt = cnt + 1 と C++ で書くなら
# Circuit になり、ゲートと FF を組み合わせて作るなら CompoundCircuit 
# になります。その回路クラスの利用者は、中身なぞ気にせず Circuit とし
# て扱うでしょう。

# このクラス設計は少し下手だったかも、という気がします。代わりに、
#
#                          +-----------------+
#                          | CycleC::Circuit |
#                          +-----------------+
#                                   |
#                   +---------------+---------------+
#                   |                               |
#     +--------------------------+     +-------------------------+
#     | CycleC::PrimitiveCircuit |     | CycleC::CompoundCircuit |
#     +--------------------------+     +-------------------------+
#                   |                               |
#         +---------+-------+                +------+--------+
#         |                 |                |               |
# +--------------+ +--------------+  +--------------+ +--------------+
# |ユーザー回路Ａ| |ユーザー回路Ｂ|  |ユーザー回路Ｃ| |ユーザー回路Ｄ|
# +--------------+ +--------------+  +--------------+ +--------------+
#
# と設計すれば、「CycleC::Circuit は回路利用者向けの抽象ベースクラス」
# 「CycleC::PrimitiveCircuit と CycleC::CompoundCircuit は回路実装者向
# けのベースクラス」という具合に、役割分担が明確になったはずでした。

================
[B] 基本的使用例
================

CycleC の基本的な使い方は、

(1) テスト対象回路クラスを作る (Circuit or CompoundCircuit)。
(2) テストジグクラスを作る (Circuit or CompoundCircuit)。
(3) 両者を組み合わせて接続したテストベンチクラスを作る
    (CompoundCircuit)。
(4) テストベンチクラスのインスタンスを作ってシミュレーションする
    メインプログラムを書く。

となります。

-----------------------------------
[B.1] NAND ゲートのシミュレーション
-----------------------------------

基本中の基本として、NAND ゲートを CycleC で記述してシミュレーション
してみます。

[B.1.1] テスト対象回路クラスを作る
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2 入力 NAND ゲートクラスを作ります。

    #include    "cyclec.h"
    using CycleC::uint;

    class NandGate : public CycleC::Circuit {
    public:
      NandGate() : Circuit(2, 1) {}    // 2 inputs, 1 output
    protected:
      virtual uint calc_outvalue(int ox) const {
        // assert(ox == 0);
        return (invalue(0) & invalue(1)) ^ 1;
      }
    };

このように、純粋組み合わせロジックは簡単に作れます。出力信号が何本もあ
る場合は、calc_outvalue() の中で if,switch 場合分けする必要があるので、
Verilog や SystemC などと比べるとコーディングが面倒ですが、その分 API 
が単純になっているわけです。

[B.1.2] テストジグクラスを作る
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ATPG 風に、サイクルごとにランダムな値を NAND ゲートに入れてやることに
して、NAND ゲートの出力が正当かどうかをベリファイします。

        +------------+         +-------------+
        |            |-------->|             |
        |            |-------->|             |
        | テストジグ |         | NAND ゲート |
        |            |<--------|             |
        |            |         |             |
        +------------+         +-------------+

    class TestJig : public CycleC::Circuit {
    public:
      TestJig() : Circuit(1, 2) {
        m_ff[0] = 0;
        m_ff[1] = 0;
        m_rng = 0x10130945;
      }
    protected:
      virtual uint calc_outvalue(int ox) const {
        // assert(ox >= 0 && ox < 2);
        return m_ff[ox];
      }
      virtual void evaluate() {
        Circuit::evaluate();
        uint expect = (m_ff[0] & m_ff[1]) ^ 1;
        uint actual = invalue(0);
        if (actual != expect)   throw std::runtime_error("verify error");
      }
      virtual void update() {
        Circuit::update();
        m_rng = m_rng * 1103515245 + 12345;
        m_ff[0] = (m_rng >> 13) & 1;
        m_ff[1] = (m_rng >> 23) & 1;
      }
    private:
      uint  m_rng;
      uint  m_ff[2];
    };

このテストジグは、いわゆる合成可能スタイルではありませんが、動きとして
は順序論理回路といえます。順序論理回路のクラス実装は、NAND ゲートのよ
うな組み合わせ論理回路のクラス実装よりは複雑で、calc_outvalue() の他に 
evaluate(), update() という手続きを定義してやる必要があります。

本テストジグでは、calc_outvalue() はメンバ変数の値を返すだけにしました。
メンバ変数は、初期化時やクロックエッジ時に更新されます。順序論理回路と
して眺めれば、「内部 FF の値をそのまま回路出力として出す」ことに相当し
ます。

evaluate() には、サイクルの途中で行うべき処理を記述します。本テストジ
グの場合は、入力信号 (NAND ゲートの出力) が正当かどうかをベリファイし
ます。

update() には、現サイクルから次サイクルに移るクロックエッジイベントが
発生した瞬間に行うべき処理を記述します。本テストジグの場合は、乱数ワー
クを更新して、2 つの内部 FF に新しい乱数値を取り込みます。

evaluate() や update() の処理は、回路クラス継承時に「処理を追加してい
く」タイプなので、各回路クラスの evaluate(), update() を定義するとき、
親クラスの evaluate(), update() も忘れずに呼んでやる必要があります。

# 作者もしょっちゅう呼び忘れてバグります。トホホ。
# wrapper API 化して追加分だけの定義でいいようにする手もあったかも…。

[B.1.3] テストベンチクラスを作る
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NAND ゲートとテストジグを組み合わせてテストベンチとします。

    class TestBench : public CycleC::CompoundCircuit {
    public:
      TestBench() : CompoundCircuit(0, 0) {
        *this << m_nand << m_jig;
        m_nand.in(0, 2) = m_jig.out(0, 2);
        m_jig.in(0) = m_nand.out(0);
        confirm_connection_sanity();
      }
    private:
      NandGate      m_nand;
      TestJig       m_jig;
    };

テストベンチは階層構造を持つので CompoundCircuit として作らなければな
りません。CompoundCircuit の作り方は、
  ・サブ回路のインスタンスをメンバ変数として持つ。
  ・コンストラクタ内で、全サブ回路インスタンスを登録する。
  ・コンストラクタ内で、全サブ回路インスタンスを接続する。
となります。本テストベンチクラスでは、
  ・m_nand, m_jig というインスタンスを持つ。
  ・*this に対して << 演算子を使って m_nand と m_jig を登録する。
  ・m_nand の入力 0 番から 2 本に、m_jig の出力 0 番から 2 本をつなぐ。
  ・m_jig の入力 0 番に、m_nand の出力 0 番をつなぐ。
としているわけです。

サブ回路間の信号接続を表す代入文は、「信号伝達先の入力ピンに、信号発生
源の出力ピンを代入する」という形で記述します。

# 代入したら信号を接続したことになる、というのは、C++ 言語本来の感覚か
# ら考えると奇妙です。この operator=() は C++ 言語本来の意味での「代入」
# ではなく、connect() というメンバ関数呼び出しの糖衣構文にすぎません。

confirm_connection_sanity() は、未接続入力ピンがないかどうかをチェック
するユーティリティ API です。テストベンチを書いたらコンストラクタの最
後に confirm_connection_sanity() を一発入れておけば安心できます。

[B.1.4] シミュレーションメインルーチンを書く
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
テストベンチのインスタンスを作って 100 サイクルシミュレーションします。

    #include <iostream>

    int main() {
      int the_cycle = -1;
      try {
        static TestBench tb;
        std::cout << "Simulation start" << std::endl;
        for (the_cycle=0; the_cycle<100; ++the_cycle) {
          tb.tick();
        }
        std::cout << "Simulation end" << std::endl;
        return 0;
      } catch (std::exception& e) {
        std::cout << std::flush;
        std::cerr << "\nFatal Error at cycle " << the_cycle << ": "
                  << e.what() << "." << std::endl;
        return 2;
      } catch (...) {
        std::cout << std::flush;
        std::cerr << "\nCurious exception occurred." << std::endl;
        return 2;
      }
    }

テストベンチのインスタンスは static 宣言して「ハードウェアは静的オブジェ
クト」という意識を出してみました。static 宣言せずにローカルオブジェク
トとしてスタック上に生成しても理論的には問題ありませんが、現実には大規
模回路のときにスタック不足エラーになる恐れがあります。

tick() を呼ぶと、全サブ回路の evaluate() が順不同で呼ばれてから全サブ
回路の update() が順不同で呼ばれます。つまり、テストベンチ全体が 1 サ
イクル進みます。シミュレーションメインルーチンとしては、満足するまで
tick() を繰り返し呼べば OK です。

このプログラムをコンパイルして実行すると、
    Simulation start
    Simulation end
と表示されます。verify error 例外が起こらなかったのでシミュレーション
成功、ということです。

[B.1.5] 信号を覗き見する
^^^^^^^^^^^^^^^^^^^^^^^^
不幸にして verify error 例外が起こった場合、あるいは「例外は起こらなかっ
たけど本当に意図通りにランダムシミュレーションしているのか確認したい」
場合、信号を覗き見してチェックする必要があります。

覗き見したい回路がシミュレーションメインルーチンからアクセス可能なら、
invalue(), outvalue() を使って信号を覗き見できます。本サンプルの場合、
TestBench クラスの m_nand, m_jig メンバ変数を public にしたうえで、シ
ミュレーションメインルーチンの for ループを次のように書けば OK です。

        for (the_cycle=0; the_cycle<100; ++the_cycle) {
          std::cout << "cycle " << the_cycle
                    << ": jig.out " << tb.m_jig.outvalue(0)
                    << " " << tb.m_jig.outvalue(1)
                    << " -> nand.in " << tb.m_nand.invalue(0)
                    << " " << tb.m_nand.invalue(1)
                    << " -> nand.out " << tb.m_nand.outvalue(0)
                    << " -> jig.in " << tb.m_jig.invalue(0)
                    << "\n";
          tb.tick();
        }

これで再コンパイルして実行すると

    Simulation start
    cycle 0: jig.out 0 0 -> nand.in 0 0 -> nand.out 1 -> jig.in 1
    cycle 1: jig.out 1 0 -> nand.in 1 0 -> nand.out 1 -> jig.in 1
    cycle 2: jig.out 1 1 -> nand.in 1 1 -> nand.out 0 -> jig.in 0
    cycle 3: jig.out 1 1 -> nand.in 1 1 -> nand.out 0 -> jig.in 0
    cycle 4: jig.out 1 1 -> nand.in 1 1 -> nand.out 0 -> jig.in 0
    cycle 5: jig.out 1 0 -> nand.in 1 0 -> nand.out 1 -> jig.in 1
    cycle 6: jig.out 0 0 -> nand.in 0 0 -> nand.out 1 -> jig.in 1
    cycle 7: jig.out 1 0 -> nand.in 1 0 -> nand.out 1 -> jig.in 1
    cycle 8: jig.out 0 0 -> nand.in 0 0 -> nand.out 1 -> jig.in 1
    cycle 9: jig.out 1 0 -> nand.in 1 0 -> nand.out 1 -> jig.in 1
    cycle 10: jig.out 0 1 -> nand.in 0 1 -> nand.out 1 -> jig.in 1
    cycle 11: jig.out 1 0 -> nand.in 1 0 -> nand.out 1 -> jig.in 1
    cycle 12: jig.out 1 1 -> nand.in 1 1 -> nand.out 0 -> jig.in 0
    cycle 13: jig.out 1 1 -> nand.in 1 1 -> nand.out 0 -> jig.in 0
    cycle 14: jig.out 0 1 -> nand.in 0 1 -> nand.out 1 -> jig.in 1
    cycle 15: jig.out 1 0 -> nand.in 1 0 -> nand.out 1 -> jig.in 1
       …中略…
    Simulation end

と表示されるので、意図通りにランダムシミュレーションしていることがわか
ります。

----------------------------------
[B.2] カウンターのシミュレーション
----------------------------------

順序論理回路の例としてカウンターを設計してシミュレーションしてみます。
[B.1.2] 節のテストベンチ回路も動きは順序論理回路でしたが、テストベンチ
という特殊用途で、いわゆる合成可能スタイルではありませんでした。ここで
はカウンターを合成可能スタイルで記述することによって、CycleC における
順序論理回路記述の本筋の姿を示しつつ、[B.1] 節より多彩に CycleC 機能を
使いこなしていきます。

[B.2.1] テスト対象回路クラスを作る
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ゲートとフリップフロップを組み合わせて 4bit カウンターを作ります。
2 段階の階層設計をしてみます。

   カウンター ＝ FF 4 個 ＋ インクリメンター
   インクリメンター ＝ AND,XOR ゲートの組み合わせ

まず AND,XOR ゲートの回路クラスを作ります。

    #include    "cyclec.h"
    using CycleC::uint;

    class AndGate : public CycleC::Circuit {
    public:
      AndGate() : Circuit(2, 1) {}
    protected:
      virtual uint calc_outvalue(int ox) const {
        return invalue(0) & invalue(1);
      }
    };
    
    class XorGate : public CycleC::Circuit {
    public:
      XorGate() : Circuit(2, 1) {}
    protected:
      virtual uint calc_outvalue(int ox) const {
        return invalue(0) ^ invalue(1);
      }
    };

次に 4bit インクリメンターの回路クラスを作ります。

    class Incrementer4 : public CycleC::CompoundCircuit {
    public:
      Incrementer4() : CompoundCircuit(4, 4) {
        *this << m_and1 << m_and2 << m_xor1 << m_xor2 << m_xor3;
        // Y1 = A0^A1
        // Y2 = (A0&A1)^A2
        // Y3 = (A0&A1&A2)^A3
        m_and1.in(0, 2) = in(0, 2);
        m_and2.in(0) = m_and1.out(0);
        m_and2.in(1) = in(2);
        m_xor1.in(0, 2) = in(0, 2);
        m_xor2.in(0) = m_and1.out(0);
        m_xor2.in(1) = in(2);
        m_xor3.in(0) = m_and2.out(0);
        m_xor3.in(1) = in(3);
        out(1) = m_xor1.out(0);
        out(2) = m_xor2.out(0);
        out(3) = m_xor3.out(0);
      }
    protected:
      virtual uint calc_outvalue(int ox) const {
        // assert(ox == 0);
        return invalue(0) ^ 1;      // Y0 = !A0
      }
    private:
      AndGate   m_and1, m_and2;
      XorGate   m_xor1, m_xor2, m_xor3;
    };

コンストラクタの中で、サブ回路 (AND,XOR インスタンス) どうしのピン接続
関係や、サブ回路と自回路 (インクリメンター自身) 間のピン接続関係を定義
しています。Verilog ネットリスト記述のような感じです。

ピン接続の代入として許される(意味がある)のは以下のパターンです。
    ・サブ回路入力ピンに、サブ回路出力ピンをつなぐ。
    ・サブ回路入力ピンに、自回路入力ピンをつなぐ。
    ・自回路出力ピンに、サブ回路出力ピンをつなぐ。
いずれも、「信号伝達先に信号発生源を代入する」という発想で記述します。

本サンプルでは、自回路の 0 番出力ピンの接続を定義してません。0 番出力
には 0 番入力を反転して出したいので、インバーターのインスタンスを設け
て接続するのが本筋ですが、今回は CycleC の「ピン接続を記述しなかった 
CompoundCircuit 出力ピンは calc_outvalue() によって計算される」という
性質を利用して、calc_outvalue() の中で反転計算しています。不自然といえ
ば不自然な書き方ですが、一般に functional simulation 時には「注目パー
ツ以外はなるべく楽して書きたい」という事情もあるので、こういう書き方が
有効なケースもあり得ます。

次は、フリップフロップの回路クラスを作ります。

    class FlipFlop : public CycleC::Circuit {
    public:
      FlipFlop() : Circuit(1, 1), m_current(0), m_next(0) {}
    protected:
      virtual uint calc_outvalue(int ox) const { return m_current; }
      virtual void evaluate() {
        Circuit::evaluate();
        m_next = invalue(0);
      }
      virtual void update() {
        Circuit::update();
        m_current = m_next;
      }
    private:
      uint  m_current, m_next;
    };

由緒正しい順序論理回路として、evaluate() 時に内部状態更新の準備をし、
update() 時に内部状態を更新します。

evaluate() では invalue() を呼ぶことができます。内部状態を更新してはい
けません。

update() では内部状態を更新します。invalue() を呼んではいけません。

evaluate() 内で invalue() を呼ぶと、ピン接続指定に基づいて発生源回路の
outvalue() が呼ばれます。つまり、他回路に現況を問い合わせることになり
ます。シミュレーションを矛盾無く行うためには、「自回路が他回路の現況を
問い合わせる必要がある間、他回路の内部状態が更新されないことを保証して
もらう必要がある」し、「他回路が自回路の現況を問い合わせてくる可能性が
ある間、自回路の内部状態を勝手に更新しないと保証する」必要があります。
そのための仕掛けが evaluate() 処理と update() 処理の分離独立であり、こ
れこそが CycleC シミュレーションのキモになります。

# [B.1.4] 節で説明したとおり、CycleC シミュレーションの 1 サイクルは、
# 「構成パーツ全てを順不同で evaluate() してから、構成パーツ全てを順不
# 同で update() する」という仕様です。evaluate(), update() を上記の
# ように使い分けておけば、このやり方で矛盾無くシミュレーションできます。

さて、やっと目的の 4bit カウンター回路クラスを作ります。フリップフロッ
プとインクリメンターを組み合わせて接続します。

    class Counter4 : public CycleC::CompoundCircuit {
    public:
      Counter4() : CompoundCircuit(0, 4) {
        *this << Components<FlipFlop*>(&m_ff[0], &m_ff[4]) << m_inc;
        for (int i=0; i<4; ++i) {
          m_ff[i].in(0) = m_inc.out(i);
          m_inc.in(i) = m_ff[i].out(0);
          out(i) = m_ff[i].out(0);
        }
      }
    private:
      FlipFlop      m_ff[4];
      Incrementer4  m_inc;
    };

CompoundCircuit としてサブ回路を登録して接続しているだけですが、
    *this << m_ff[0] << m_ff[1] << m_ff[2] << m_ff[3]
とする代わりに
    *this << Components<FlipFlop*>(&m_ff[0], &m_ff[4])
という構文を使って、4 つの回路を一気に登録しています。この構文は、回路
ポインタに限らず回路イテレータ全般に対して使えるテンプレートです。

# 結局、「CycleC における順序論理回路記述の本筋の姿」は、Counter4
# クラスでなく FlipFlop クラスのほうに発現しているといえます。

[B.2.2] テストジグクラスを作る
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
本サンプルのテスト用回路としては、カウンターの等価回路をビヘイビアレベ
ルで書きます。ベリファイ処理はテストベンチクラスに任せることにします。

# ベリファイ機能がないので、「ジグ」というより「レファレンスデザイン」です。

    class BehaviorCounter : public CycleC::Circuit {
    public:
      explicit BehaviorCounter(int nr_bits)
        : Circuit(0, nr_bits), m_value(0), m_mask((1<<nr_bits)-1) {}
    protected:
      virtual uint calc_outvalue(int ox) const {
        return (m_value >> ox) & 1;
      }
      virtual void update() {
        Circuit::update();
        m_value = (m_value + 1) & m_mask;
      }
    private:
      uint        m_value;
      const uint  m_mask;
    };

ネットリストレベルだと 70 行になる回路がビヘイビアレベルでは 15 行です
みました。抽象度の違いというヤツですね。

# 今どきの論理合成ツールならこの程度は合成可能でしょうから、このカウン
# タ記述はレジスタ転送レベル、といいたいところですが、CycleC において
# は、レジスタ転送レベルとは「evaluate() 時に更新準備計算をし、
# update() 時には更新(代入)のみを行う」ような記述スタイルだ、と限定す
# るほうが心理的に安全です。そう意識しておけば、update() 内で 
# invalue() を呼んでしまうバグを起こしにくくなります。

このヒヘイビアカウンターは、コンストラクタ引数によってインスタンスごと
にビット数をカスタマイズできるようにしてみました。このテクニックは、ビ
ヘイビアレベル限定というわけではありません。レジスタ転送レベルでも使え
ますし、ripple carry adder のような規則的構造の回路ならネットリストレ
ベルでも使えるでしょう。

[B.2.3] テストベンチクラスを作る
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ネットリストレベルカウンターとビヘイビアカウンターを並列実行して比較す
るテストベンチを作ります。

    class TestBench : public CycleC::CompoundCircuit {
    public:
      TestBench() : CompoundCircuit(0, 0), m_ref(4) {
        *this << m_cnt << m_ref;
        confirm_connection_sanity();
      }
    protected:
      virtual void evaluate() {
        CompoundCircuit::evaluate();
        uint actual = m_cnt.outvalue(0, 4);
        uint expect = m_ref.outvalue(0, 4);
        if (actual != expect)  throw std::runtime_error("verify error");
      }
    private:
      Counter4              m_cnt;
      BehaviorCounter       m_ref;
    };

テストベンチ自体のコンストラクタでは全くピン接続してませんが、サブ回路
である m_cnt 内部にはピン接続が存在するので、一応
confirm_connection_sanity() しました。

# Counter4 のコンストラクタ内で confirm_connection_sanity() する手も
# あります。Counter4 は 0 入力なので、インスタンス生成時点で全ての
# 入力ピン接続が確定しているはずですから。

evaluate() 時に、2 つのカウンターの出力 4bit が一致しているかどうかチェッ
クしています。outvalue() に第 2 引数を指定して、複数の出力信号をまとめ
て unsigned integer として得ました。このように、32 本以内なら 1 回の 
outvalue(), invalue() で得ることができ、ピン番号の小さい信号が LSB に
なります。

# outvalue() から間接的に呼ばれる calc_outvalue() は 1bit 専用仕様なの
# で、outvalue() は必要に応じて calc_outvalue() を複数回呼びます。

[B.2.4] シミュレーションメインルーチンを書く
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
シミュレーションメインルーチンは [B.1.4] 節と同じです。

プログラムをコンパイルして実行すると、例によって
    Simulation start
    Simulation end
と無愛想に表示され、verify error 例外が起こらなかったのでシミュレーショ
ン成功ということがわかります。

[B.2.5] 信号を覗き見する
^^^^^^^^^^^^^^^^^^^^^^^^
いくら verify error 例外が起こらなかったといっても、やっぱり信号をモニ
ターしないと安心できないので、TestBench の m_cnt と m_ref を public
にして、シミュレーションメインルーチンの for ループを

        for (the_cycle=0; the_cycle<100; ++the_cycle) {
          std::cout << "cycle " << the_cycle
                    << ": cnt=" << tb.m_cnt.outvalue(0, 4)
                    << " ref=" << tb.m_ref.outvalue(0, 4)
                    << "\n";
          tb.tick();
        }

と変えます。これで再コンパイルして実行すると

    Simulation start
    cycle 0: cnt=0 ref=0
    cycle 1: cnt=1 ref=1
    cycle 2: cnt=2 ref=2
    cycle 3: cnt=3 ref=3
    cycle 4: cnt=4 ref=4
    cycle 5: cnt=5 ref=5
    cycle 6: cnt=6 ref=6
    cycle 7: cnt=7 ref=7
    cycle 8: cnt=8 ref=8
    cycle 9: cnt=9 ref=9
    cycle 10: cnt=10 ref=10
    cycle 11: cnt=11 ref=11
    cycle 12: cnt=12 ref=12
    cycle 13: cnt=13 ref=13
    cycle 14: cnt=14 ref=14
    cycle 15: cnt=15 ref=15
    cycle 16: cnt=0 ref=0
    cycle 17: cnt=1 ref=1
    cycle 18: cnt=2 ref=2
    cycle 19: cnt=3 ref=3
       …中略…
    Simulation end

と表示されるので、カウンターが意図通りに動いていることがわかります。


==============================
[C] 回路利用者向けリファレンス
==============================

---------------------
[C.1] CycleC::Circuit
---------------------

[C.1.1] InRange in(int ix, int n=1), OutRange out(int ox, int n=1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
入力ピン群 (ix 番から n 本) や出力ピン群 (ox 番から n 本) を表す
proxy オブジェクトを返します。

代入演算子を使って入力ピン群に出力ピン群を代入すれば、当該ピンを
wire でつないだことになります。

例：
  class Adder : public Circuit { ... };
  class Register : public Circuit { ... };
  Register reg;
  Adder    adder;
  reg.in(0,8) = adder.out(0,8);

「信号伝達先に、信号発生源を代入する」という記述スタイルです。

reg.in(0) = adder.in(0) など無効な接続を指定すると、「オーバーロード検
索失敗」のコンパイルエラーになります。

代入演算子で「当該ピンの wire 接続」を表すのは、本来の意味の「代入」と
はいえません。コードの見た目をコンパクトにするための糖衣構文ということ
になります。a = b = c = ... のようにチェイニングするのは無意味なので、
この代入演算の返り値は void です。

こういうピン接続指定は、階層設計やテストベンチの CompoundCircuit のコ
ンストラクタ内で行うものとします。

ピン接続指定時に左辺と右辺の信号本数が異なったり、接続済みの入力ピンに
再び接続しようとすると、operator=() が CycleC::connection_error 例外を
投げます。

in() や out() 自体は例外を投げません。

[C.1.2] uint outvalue(int ox, int n=1) const
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
出力ピン群 (ox 番から n 本) の現在値を返します。返り値は 0 〜 
((1<<n)-1) の n ビット符号無し整数で、ox 番ピンが LSB です。n は最大 
32 まで指定可能ということになります。

内部的には、1 本ずつ calc_outvalue() を呼び出します。ただし、同一サイ
クル内で同じピンに対して何度も outvalue() が呼ばれたときに毎回発生源回
路の calc_outvalue() を呼び出すのは無駄なので、キャッシングします。

# Circuit を継承したユーザー回路の update() が Circuit::update() を呼
# び出すのを忘れると、クロックが進んでもキャッシュがクリアされなくなり、
# 動作が破綻します。

回路の接続がゲートループになっていると、calc_outvalue() が invalue() 
を呼んで invalue() が outvalue() を呼んで…、と無限ループに陥りそうに
なるので、outvalue() はその検出も行います。outvalue() は、ゲートループ
を検出したら CycleC::infinite_recursion_error 例外を投げます。

# また、内部で calc_outvalue() を呼ぶ際には例外を捕捉しないので、ユー
# ザー回路クラスの calc_outvalue() が独自の例外を投げた場合はその例外
# が outvalue() の呼び出し元に筒抜けになります。

[C.1.3] uint invalue(int ix, int n=1) const
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
入力ピン群 (ix 番から n 本) の現在値を返します。使い方は outvalue() と
同じです。

内部的には、階層設計やテストベンチの CompoundCircuit コンストラクタで
指定されたピン接続に従って、信号発生源回路の outvalue() を呼び出します。
キャッシング付きです。

# 内部で outvalue() を呼ぶ際に例外を捕捉しないので、outvalue() が 
# infinite_recursion_error 等の例外を投げた場合はその例外が invalue() 
# の呼び出し元に筒抜けになります。

1 本ずつバラバラに接続したピンをまとめて invalue() したり、N 本まとめて
接続したピンを 1 本ずつ invalue() してもかまいません。

[C.1.4] void tick()
^^^^^^^^^^^^^^^^^^^
シミュレーションを 1 サイクル進めます。

内部的には、evalute() してから tick() します。

ユーザー回路クラスの evaluate() は内部でたいてい invalue() を呼ぶでしょ
うから、例外が投げられて tick() の呼び出し元に筒抜けになる可能性があり
ます。

これは Circuit クラスの API ですが、実際には、テストベンチ 
CompoundCircuit クラスに対して呼び出すことになるはずです。

[C.1.5] void confirm_connection_sanity()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
未接続入力ピンがないことを確認します。

未接続入力ピンがあった場合は CycleC::connection_error 例外を投げます。

これは Circuit クラスの API ですが、実際には、テストベンチ 
CompoundCircuit クラスに対して呼び出すことになるはずです。

[C.1.6] void reset()
^^^^^^^^^^^^^^^^^^^^
回路をリセットする … ことを想定した仮想手続きです。

CycleC シミュレーションにとって reset() は絶対に必要というわけではない
ので、ユーザー回路クラスによっては reset() 無しの手抜き実装もあり得ます。

# [B] 節の基本的使用例も reset() 無し手抜き実装です。

[C.1.7] void evaluate(), void update()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
CycleC シミュレーションのキモとなる evaluate(), update() 処理です。

…が、回路利用者がシミュレーションを行うときは普通は tick() API を使う
ので、evaluate(),update() を直接使うことはほとんどありません。使うのは、
多相クロックシステムをシミュレーションする発展技のときです。

[C.1.8] std::string name() const
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
自身の名前を返します。

デフォルトでは、階層設計構造のトップから順にクラス名をピリオドでつなげ
たものです。

std::string 関連の例外 (std::bad_alloc) を投げる可能性があります。

CycleC::connection_error, CycleC::infinite_recursion_error の what()
メッセージにはこの名前が含まれます。

実際問題として、テストシステム内に回路インスタンスが複数ある場合、クラ
ス名だけではどのインスタンスなのか区別がつかないので役に立ちません。イ
ンスタンスが複数生成されることを想定するユーザー回路クラスは、name() 
としてインスタンス名を返せるよう、「インスタンス名設定 API」を各自のス
タイルで提供しているはずです。回路利用者はその API を使ってインスタン
スごとに一意の名前を設定してください。

# [B] 節の基本的使用例のユーザー回路クラスはインスタンス名設定 API を
# 提供してないので、手抜き実装といえます。

[C.1.9] コピーコンストラクタ、代入演算子
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Circuit クラスに対してコピーコンストラクタや代入演算子を使ってはいけま
せん。そもそも回路というのは静的なブツなのだから、コピーや代入を行おう
と思うことはないはずです。

# ここで禁止している代入演算は「Circuit クラス」に関するハナシです。
# [C.1.1] 節の InRange,OutRange クラスに対して使える代入演算とは別モノ。


-----------------------------
[C.2] CycleC::CompoundCircuit
-----------------------------

回路利用者にとっては、回路は全て Circuit であり、中身が 
CompoundCircuit だったら別扱いするなんてことはあり得ないはずです。

よって、回路利用者向けの CompoundCircuit API はありません。

ただし、[C.1] 節の各 Circuit API について、「内部的には…」の説明が 
Circuit と CompoundCircuit とで異なってくるので、ざっと解説します。

outvalue() は、内部的に、サブ回路の出力ピンに接続されているならそのサ
ブ回路の outvalue() を呼び、そうでなければ自身の calc_outvalue() を呼
びます。

confirm_connection_sanity() は、内部的に、自身(Circuit扱い)と全サブ回
路を順不同で confirm_connection_sanity() します。

reset() は、内部的に、全サブ回路を順不同で reset() します。

evaluate() は、内部的に、全サブ回路を順不同で evaluate() します。

update() は、内部的に、全サブ回路を順不同で update() します。

----------------------------------------------------------------
[C.3] CycleC::connection_error, CycleC::infinite_recursion_error
----------------------------------------------------------------

CycleC 固有のエラーを示す例外クラスです。
いずれも std::logic_error のサブクラスです。

connection_error は回路生成時の接続指定関係のエラーを表します。回路の
インスタンスを生成するときに発生します。

infinite_recursion_error は回路内にゲートループがあることを表します。
シミュレーションの最中にゲートループ部分に実行が及んだときに発生します。
NAND ゲートたすきがけ RS-FF のような安定ゲートループであっても例外にな
ります。

infinite_recursion_error は、シミュレーション最中にゲートループ部分に
実行が及ばないかぎり、発生しません。たとえばセレクタ回路を
    uint calc_outvalue(int ox) const {
      return invalue(0) ? invalue(1) : invalue(2);
    }
と書くと、入力ピン 0 番が 1 にならない限り invalue(1) が実行されない
ので、テストベンチのカバレッジが不十分だと、入力ピン 1 番がらみでゲー
トループがあっても検出されない可能性があります。

回路内のゲートループを完璧に検出するには、
  ・各回路クラスの calc_outvalue() において、目的の出力ピンに
    (静的ハードとして)影響を及ぼす入力ピン全てに対してちゃんと
    invalue() を呼ぶ。たとえばセレクタの calc_outvalue() は
       uint sel = invalue(0);
       uint a = invalue(1);
       uint b = invalue(2);
       return sel ? a : b;
    と書く。
  ・シミュレーション時に、テスト対象回路の出力ピン全てに対して
     outvalue() を呼ぶ。
とすれば OK です。

connection_error も infinite_recursion_error も、what() メッセージは問
題となった回路の名前やピン番号を含む人間向け文字列になりますが、
Circuit* や int などの machine readable なメンバ変数はありません。つま
り、回路利用者が凝ったリカバリー処理をすることはできません。

CycleC ライブラリ自身のソースコードは、これら 2 つの例外しか投げません。
std::out_of_range とかを投げたりはしません。ただし、CycleC ライブラリ
が内部的に利用する標準ライブラリ (std::vector など) が std::bad_alloc 
等の std 系例外を投げるせいで、CycleC API も std 系例外を投げることが
あり得ます。さらに、CycleC API の多くが仮想関数がらみであり、実際の実
装はユーザ回路クラス実装者に委ねられるので、CycleC API がユーザ回路独
自例外を投げることもあり得ます。

connection_error, infinite_recursion_error 例外のコンストラクタは
what() 文字列を作るために std::string を使うので、そのときに 
std::bad_alloc 例外が発生すると「もーやってらんねー」状態になります。
そのケースの std::bad_alloc 例外は CycleC ライブラリの throw() リスト
では考慮されてないので、std::unexpected() が呼ばれるでしょう。

==============================
[D] 回路実装者向けリファレンス
==============================

---------------------
[D.1] CycleC::Circuit
---------------------

[D.1.1] Circuit(int nr_input, int nr_output)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
コンストラクタです。

入力信号 nr_input 本、出力信号 nr_output 本の回路として、シミュレーショ
ン用の基礎データ構造を生成・初期化します。

invalue() や outvalue() など、入力信号や出力信号の番号を扱うメンバ関数
においては、0 〜 nr_input-1 番および 0 〜 nr_output-1 番の番号を指定し
てもらうことになります。

ユーザー回路クラスの実装者は、
    class Counter : public CycleC::Circuit {
    public:
      static const int SIG_CLK = 0;
      static const int SIG_ENABLE = 1;
      static const int SIG_CLR = 2;
      :
    };
のように信号名の定数を定義してやると、利用者に喜ばれるでしょう。

nr_input, nr_output は、m_nr_input, m_nr_output という protected な 
const int メンバ変数に保存されます。ユーザー回路クラス実装者は、
calc_outvalue(), evaluate(), update() 等の中で m_nr_input, m_nr_output 
を読むことができます。

コンストラクタは、内部で std::vector を生成するので、std::bad_alloc 例
外を投げる可能性があります。

[D.1.2] ~Circuit()
^^^^^^^^^^^^^^^^^^
仮想デストラクタです。Circuit 自体のデストラクタは何もしません。

回路というのは本来静的なモノですから、「プログラム開始時に生成され、プ
ログラム終了時に解体される」だけのはずです。

[D.1.3] uint calc_outvalue(int ox) const
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
出力ピン ox 番の現在値 (0 or 1) を返すべき仮想関数です。

Circuit クラス自身の calc_outvalue() は定数 0 を返すので、Circuit クラ
ス(継承無し)のインスタンスを作ると「定数 0 発生回路」になります。

ユーザー回路クラス実装者は、calc_outvalue() を適切に定義しなければなり
ません。内部状態メンバ変数の値を返すとか、invalue() で入力ピンの現在値
を調べて論理演算して返すとか、内部状態と invalue() の両方を使って論理
演算して返すとか。

outvalue() を使って他のピンの現在値を調べてそれを加工して返す、という
のも OK です。

[D.1.4] void evaluate(), void update()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
順序論理回路の処理を記述するための仮想手続きです。

順序論理ユーザー回路クラスの実装者は、これらの手続きを適切に定義しなけ
ればなりません。

evaluate() は、次のクロックエッジイベントで行うべき内部状態更新の準備
をするものとします。典型的には、内部 FF 変数の現在値(メンバ変数)と 
invalue() 値を元に、内部 FF の次値を求め、それを現在値とは別のメンバ変
数にメモしておきます。

# [B.2.2] 節の例のように、evaluate() を定義する必要がないケースもあり
# ます。

update() は、現サイクルから次サイクルへ移るクロックエッジにおける内部
状態更新処理を行うものとします。典型的には、内部 FF 次値(メンバ変数)を
内部 FF 現在値(メンバ変数) にコピーします。

evaluate() 内では invalue() を呼んでもかまいませんし、たいていは呼ぶこ
とになるでしょう。evaluate() 内で内部状態を更新してはいけません。具体
的には、evaluate() を呼ぶ前と後とで calc_outvalue() の返り値が変わって
はいけません。

update() 内では invalue() を呼んではいけません。もし invalue() を呼ぶ
と他回路に出力ピン状態を問い合わせることになりますが、他回路はすでに内
部状態を更新済みかもしれず、適切な値を得られる保証がありません。

★★★★重要★★★★重要★★★★重要★★★★重要★★★★重要★★★★★
★ evaluate() や update() の処理は、回路クラス継承時に「処理を追加  ★
★ していく」タイプなので、各回路クラスの evaluate(), update() を   ★
★ 定義するとき、親クラスの evaluate(), update() も忘れずに呼んで   ★
★ やる必要があります。                                             ★
★★★★重要★★★★重要★★★★重要★★★★重要★★★★重要★★★★★

組み合わせ論理ユーザー回路クラスの場合、evaluate(),update() を定義する
必要はありませんし、定義するのは変です。

[D.1.5] void reset()
^^^^^^^^^^^^^^^^^^^^
順序論理回路のリセット処理を記述するための仮想手続きです。

順序論理ユーザー回路クラスの実装者は、これらの手続きを適切に定義すべき
です。

# CycleC シミュレーションにおいて reset() は必須ではないので、手抜き実
# 装としては [B] 節の例のように定義せずに放置する手もありますが…。

reset() は、evaluate() や update() と同様に、親クラスの reset() を忘れ
ずに呼んでやる必要があります。

回路クラスのコンストラクタからも reset() を呼ぶようにすると、重複のな
いすっきりしたコードになるでしょう。

# ただし、コンストラクタから呼ばれた reset() にとっては、「親クラスの 
# reset() を呼ぶ」という処理は冗長になります (親クラスの分は親クラスコ
# ンストラクタで reset 済みのはずだから)。つまり、コンストラクタが安直
# に reset() を呼ぶと、コードは重複しないが実行が重複してしまいます。
# コードの重複も実行の重複もなくすには
#     Counter::Counter() : Circuit(...) { ...; reset_self(); }
#     void Counter::reset() { Circuit::reset(); reset_self(); }
#     void Counter::reset_self() { m_value = 0; }
# みたいに書けばいいですが、そこまで手間暇かけてコーディングすべきと
# 思うかどうかは人それぞれでしょう。

[D.1.6] std::string myname() const
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
回路インスタンスの名前を返すべき仮想関数です。

Circuit クラス自身の myname() は、RTTI クラス名 (継承ツリーの末尾) を
返すので、[B.2] 節の例だと "AndGate" とか "Counter4" とかになります。

回路利用者向け API の「name()」は、階層設計ツリーの各段階の myname() 
をピリオドでくっつけて "TestBench.Counter4.Incrementer4.AndGate" とか
いう名前を返すことになります。

TestBench.Counter4.Incrementer4 までは一意なので問題ありませんが、
"AndGate" が 2 つのうちどっちなのか、わかりません。AndGate クラスの
myname() は、インスタンスを識別できる一意名を返すべきです。そのために
は、AndGate クラスに set_name() とでもいう名前設定 API を設けて、
Incrementer4 クラスのコンストラクタ内で
    m_and1.set_name("And1");
    m_and2.set_name("And2");
とし、AndGate クラスの myname() はその名前を返すように実装すればいいで
しょう。

一般のユーザー回路クラスの名前設定 API としては、set_name() でなく
set_number(int) とか、set_position(int row, int col) とかも考えられる
ので、CycleC ライブラリとしては仕様を強制しません。ユーザー回路クラス
実装者が適宜仕様策定するものとします。

myname() を実装する際には、「まだ set_name() されてないなら 
Circuit::myname() を返す」などと配慮すべきです。なぜなら、自身が
CompoundCircuit のとき、コンストラクタ内のサブ回路登録・接続がバグって
いるとコンストラクタ内で CycleC::connection_error 例外が発生し、
myname() が呼ばれるからです。コンストラクタ内ということは親が自分を生
成しようとしている最中ということであり、まだ set_name() されていないわ
けです。

-----------------------------
[D.2] CycleC::CompoundCircuit
-----------------------------

[D.2.1] CompoundCircuit(int nr_input, int nr_output)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
コンストラクタです。使い方は Circuit コンストラクタと同じです。

CompoundCircuit コンストラクタ自体が投げ得る例外は std::vector 関連の
例外 (std::bad_alloc) だけですが、CompoundCircuit クラスを継承したユー
ザー複合回路クラスのコンストラクタは、サブ回路の登録・接続を行う必要が
あるので、登録・接続のしかたをバグれば CycleC::connection_error 例外を
投げることになるでしょう。

# 登録・接続コードがバグっていなければ connection_error 例外を投げるこ
# とはないので、ユーザー複合回路コンストラクタの throw() リストに 
# connection_error をリストアップすべきかどうかは考えどころです。

[D.2.2] ~CompoundCircuit()
^^^^^^^^^^^^^^^^^^^^^^^^^^
仮想デストラクタです。CompoundCircuit 自体のデストラクタは何もしません。

[D.2.3] ストリーム風 << 演算子
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
サブ回路を登録します。具体的ユーザー複合回路クラスの実装者は、複合回路
クラスのコンストラクタ内で、全サブ回路を登録する必要があります。

    CompoundCircuit& operator<<(Circuit& component);

    template <typename Iter>
    CompoundCircuit& operator<<(const Components<Iter>& range);

という 2 通りの書式で、以下のように使えます。

    class TinyPC : public CompoundCircuit {
      ...;
    private:
      CpuCore        m_cpu;
      UART           m_uart;
      VGAController  m_vga;
      GPIO           m_gpio[10];
    };

    TinyPC::TinyPC() : CompoundCircuit(...) {
      *this << m_cpu << m_uart << m_vga
            << Components<GPIO*>(&m_gpio[0], &m_gpio[10]);
      ...;
    }

Components は、Circuit の forward iterator 2 つ (first, last) によって
回路群を指し示すデータ構造です (中身は std::pair)。

# STL 風にイテレータなぞと言っていますが、実際問題として、Circuit クラ
# スはコピーコンストラクタや代入演算が使用禁止なので、STL コンテナに格
# 納できません。ただ、コピーコンストラクタや代入演算を使わない自作コン
# テナに回路を格納すれば、そのイテレータを使って Components を作ること
# は可能です。

Components は「概念として」forward iterator を使っているだけであり、
std::iterator には依存していません。

すでに登録済みの回路を二重に登録しようとすると、operator<<() が 
CycleC::connection_error 例外を投げます。

[D.2.4] InRange in(int ix, int n=1), OutRange out(int ox, int n=1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Circuit::in(), Circuit::out() (cf. [C.1.1] 節) と同様に、入出力ピン群
を表す管理オブジェクトを返します。

CompoundCircuit の入出力ピン群は、Circuit ピン群と等価に他回路と接続指
定できるのは当然として、自身が内蔵するサブ回路の入出力ピン群と接続する
こともできます。

  使用例：

    TinyPC::TinyPC() : CompoundCircuit(10, 10) {
      *this << m_cpu << m_uart << m_vga
            << Components<GPIO*>(&m_gpio[0], &m_gpio[10]);
      for (int i=0; i<10; ++i) {
        m_gpio[i].in(0) = in(i);
        out(i) = m_gpio[i].out(0);
      }
      m_gpio.in(1, 8) = m_cpu.out(0, 8);
      ...;
    }

この例では、TinyPC 回路全体の入出力として、GPIO の入出力を出し入れしよ
うとしているわけです。

左辺や右辺に入出力ピンが入り乱れてますが、「信号伝達先に、信号発生源を
代入する」という記述スタイルで一貫しています。これさえ覚えておけば、迷
うことはありません。

out(i) = m_gpio[i].in(0) など無効な接続を指定すると、「オーバーロード
検索失敗」のコンパイルエラーになります。

複合回路自身の出力ピンをサブ回路の出力ピンに接続すると、複合回路自身の 
outvalue() が呼ばれたときに、自身の calc_outvalue() でなくサブ回路の 
outvalue() が呼ばれるようになります。たいていの複合回路は、「全ての出
力ピンをどこかのサブ回路に接続し、calc_outvalue() は定義しない」という
スタイルで書くことになるでしょう。

============================
[E] 発展技：多相クロック対応
============================

CycleC ライブラリは、単相クロックシミュレーション専用に設計されました
が、使い方を工夫すれば、多相クロックシミュレーションもできます。

# 無節操にクロックドメインを混在させた任意の回路をシミュレーションでき
# るわけではありませんが、「クロックドメインをまたがる信号は、送信側も
# 受信側も FF でたたいてしかも 1 対 1 接続する」というお行儀のよい多相
# クロック回路なら OK です。

------------------
[E.1] 2 相クロック
------------------

手始めに、2 相クロックのシミュレーションのしかたを示します。

    class CpuCore : public CycleC::Circuit {
      // コアクロックドメイン (100MHz)
      ...;
    };
    class BusInterface : public CycleC::Circuit {
      // バスクロックドメイン (66.666…MHz)
      ...;
    };
    class TestJig : public CycleC::Circuit {
      // バスクロックドメイン (66.666…MHz)
      ...;
    };

    class TestBench : public CycleC::CompoundCircuit {
    public:
      TestBench() : CompoundCircuit(0, 0) {
        *this << m_cpu << m_busif << m_jig;
        m_cpu.in(...) = m_busif.out(...);
        m_busif.in(...) = m_cpu.out(...);
        m_busif.in(...) = m_jig.out(...);
        m_jig.in(...) = m_busif.out(...);
      }
      CpuCore        m_cpu;
      BusInterface   m_busif;
      TestJig        m_jig;
    };

    int main() {
      int the_time = -1;
      try {
        static TestBench  tb;
        // core clock period = 10ns
        // bus clock period = 15ns
        for (the_time=0; the_time<1000; the_time+=5) {
          if ((the_time % 30) == 0) {
            tb.m_cpu.evaluate();
            tb.m_busif.evaluate();
            tb.m_jig.evaluate();
            tb.m_cpu.update();
            tb.m_busif.update();
            tb.m_jig.update();
          } else if ((the_time % 10) == 0) {
            tb.m_cpu.evaluate();
            tb.m_cpu.update();
          } else if ((the_time % 15) == 0) {
            tb.m_busif.evaluate();
            tb.m_jig.evaluate();
            tb.m_busif.update();
            tb.m_jig.update();
          }
        }
      } catch ... {
        ...;
      }
    }

TestBench クラスを作るところまでは、単相クロックと同じです。

シミュレーションメインルーチンは、tb.tick() でクロックを進めるわけには
いきません。クロックサイクルのかわりに時刻を管理して、「この時刻にはコ
アクロックが立ち上がる」「この時刻にはバスクロックが立ち上がる」「この
時刻には両方のクロックが立ち上がる」とその都度判定し、立ち上がるクロッ
クが支配する回路について、「順不同 evaluate()、順不同 update()」します。

evaluate(), update() のシミュレーション原理さえ理解していれば、このや
り方で 2 相クロック回路を正しくゼロ遅延シミュレーションできることがわ
かるはずです。

BusInterface と TestJig を複合回路にまとめておけば、テストベンチクラス
に内蔵すべきサブ回路は m_cpu と m_busclkdomain の 2 つになり、シミュレー
ション for ループの中を

          if ((the_time % 30) == 0) {
            tb.tick();
          } else if ((the_time % 10) == 0) {
            tb.m_cpu.tick();
          } else if ((the_time % 15) == 0) {
            tb.m_busclkdomain.tick();
          }

と簡潔に書けます。

# 元の例でも tb.tick() と tb.m_cpu.tick() は使えるので少しは簡潔に
# 書けますが、m_busif ＆ m_jig の evaluate(),update() ペア 4 行を
# 簡潔に書くことはできません。

シミュレーションメインルーチンが全回路のクロックドメインを意識する必要
があるので、階層設計の奥深くに 2 相クロック回路を埋めこむと、シミュレー
ションメインルーチンを書くのが面倒になります。かなりの大物パーツまで単
相クロック設計し、トップレベルに近い階層でクロックドメインを融合するの
がコツです。

------------------
[E.2] 多相クロック
------------------

2 相クロックシミュレーションのやりかたがわかれば、多相クロックに応用す
るのは自明です。

ただ、3 相以上の場合、たとえクロックドメイン毎に CompoundCircuit にま
とめたとしても、

        if (全クロックが立ち上がり) {
          tb.tick();
        } else if (コアクロックとバスクロックだけが立ち上がり) {
          tb.m_cpu.evaluate();
          tb.m_busclkdomain.evaluate();
          tb.m_cpu.update();
          tb.m_busclkdomain.update();
        } else if (コアクロックと PCI クロックだけが立ち上がり) {
          tb.m_cpu.evaluate();
          tb.m_pciclkdomain.evaluate();
          tb.m_cpu.update();
          tb.m_pciclkdomain.update();
        } else if (バスクロックと PCI クロックだけが立ち上がり) {
          tb.m_busclkdomain.evaluate();
          tb.m_pciclkdomain.evaluate();
          tb.m_busclkdomain.update();
          tb.m_pciclkdomain.update();
        } else if (コアクロックだけが立ち上がり) {
          tb.m_cpu.tick();
        } else if (バスクロックだけが立ち上がり) {
          tb.m_busclkdomain.tick();
        } else if (PCI クロックだけが立ち上がり) {
          tb.m_pciclkdomain.tick();
        }

という感じになり、どうも簡潔には書けません。いっそのこと tick() の存在
を忘れて

        bool cpuclk_event = ((the_time % 10) == 0);
        bool busclk_event = ((the_time % 15) == 0);
        bool pciclk_event = ((the_time % 30) == 0);
        if (cpuclk_event)  tb.m_cpu.evaluate();
        if (busclk_event)  tb.m_busclkdomain.evaluate();
        if (pciclk_event)  tb.m_pciclkdomain.evaluate();
        if (cpuclk_event)  tb.m_cpu.update();
        if (busclk_event)  tb.m_busclkdomain.update();
        if (pciclk_event)  tb.m_pciclkdomain.update();
        
と書くほうがすっきりするかも。

